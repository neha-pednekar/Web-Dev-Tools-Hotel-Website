// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using ProjectNehaPalace.Data;
using System;

namespace ProjectNehaPalace.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ProjectNehaPalace.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ProjectNehaPalace.Models.HotelViewModels.Address", b =>
                {
                    b.Property<string>("AddressID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressLine1");

                    b.Property<string>("AddressLine2");

                    b.Property<string>("AddressType");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("State");

                    b.Property<string>("ZipCode");

                    b.HasKey("AddressID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("ProjectNehaPalace.Models.HotelViewModels.Booking", b =>
                {
                    b.Property<string>("BookingID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BookingDate");

                    b.Property<DateTime>("CheckinDate");

                    b.Property<DateTime>("CheckoutDate");

                    b.Property<string>("CustomerID");

                    b.Property<string>("EmployeeID");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int>("NumberOfAdults");

                    b.Property<int>("NumberOfChildren");

                    b.Property<int>("NumberOfDays");

                    b.Property<double>("NumberOfRooms");

                    b.Property<string>("PaymentID");

                    b.Property<double>("TotalCost");

                    b.HasKey("BookingID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("PaymentID");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("ProjectNehaPalace.Models.HotelViewModels.Customer", b =>
                {
                    b.Property<string>("CustomerID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmailAddress");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("PersonID");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("CustomerID");

                    b.HasIndex("PersonID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ProjectNehaPalace.Models.HotelViewModels.CustomerHistory", b =>
                {
                    b.Property<string>("CustomerHistoryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BookingID");

                    b.HasKey("CustomerHistoryID");

                    b.HasIndex("BookingID");

                    b.ToTable("CustomerHistory");
                });

            modelBuilder.Entity("ProjectNehaPalace.Models.HotelViewModels.CustomerReview", b =>
                {
                    b.Property<string>("CustomerReviewID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<string>("CustomerID");

                    b.Property<int>("Rating");

                    b.HasKey("CustomerReviewID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomerReviews");
                });

            modelBuilder.Entity("ProjectNehaPalace.Models.HotelViewModels.Department", b =>
                {
                    b.Property<string>("DepartmentID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DepartmentName");

                    b.HasKey("DepartmentID");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("ProjectNehaPalace.Models.HotelViewModels.Employee", b =>
                {
                    b.Property<string>("EmployeeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DepartmentID");

                    b.Property<string>("EmployeeCode");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("PersonID");

                    b.Property<string>("SSN");

                    b.HasKey("EmployeeID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("PersonID");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("ProjectNehaPalace.Models.HotelViewModels.EmployeeCompensation", b =>
                {
                    b.Property<string>("EmployeeCompensationID")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Bonus");

                    b.Property<string>("EmployeeID");

                    b.Property<double>("Salary");

                    b.HasKey("EmployeeCompensationID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("EmployeeCompensation");
                });

            modelBuilder.Entity("ProjectNehaPalace.Models.HotelViewModels.NPInfo", b =>
                {
                    b.Property<string>("NPInfoID")
                        .ValueGeneratedOnAdd();

                    b.HasKey("NPInfoID");

                    b.ToTable("NPInfo");
                });

            modelBuilder.Entity("ProjectNehaPalace.Models.HotelViewModels.Payment", b =>
                {
                    b.Property<string>("PaymentID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CVV");

                    b.Property<string>("CreditCardNumber");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("NameOnCard");

                    b.HasKey("PaymentID");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("ProjectNehaPalace.Models.HotelViewModels.Person", b =>
                {
                    b.Property<string>("PersonID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressID");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("PersonID");

                    b.HasIndex("AddressID");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("ProjectNehaPalace.Models.HotelViewModels.PhotoGallery", b =>
                {
                    b.Property<string>("PhotoGalleryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PhotoCategory");

                    b.Property<string>("PhotoURL");

                    b.HasKey("PhotoGalleryID");

                    b.ToTable("PhotoGallery");
                });

            modelBuilder.Entity("ProjectNehaPalace.Models.HotelViewModels.Room", b =>
                {
                    b.Property<int>("RoomID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Availability");

                    b.Property<string>("BookingID");

                    b.Property<bool>("IsAvailable");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int>("RoomNumber");

                    b.Property<double>("RoomTariff");

                    b.Property<string>("RoomType");

                    b.Property<int>("RoomsOccupied");

                    b.Property<int>("TotalNumberOfRooms");

                    b.HasKey("RoomID");

                    b.HasIndex("BookingID");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProjectNehaPalace.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProjectNehaPalace.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectNehaPalace.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProjectNehaPalace.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjectNehaPalace.Models.HotelViewModels.Booking", b =>
                {
                    b.HasOne("ProjectNehaPalace.Models.HotelViewModels.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID");

                    b.HasOne("ProjectNehaPalace.Models.HotelViewModels.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("ProjectNehaPalace.Models.HotelViewModels.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentID");
                });

            modelBuilder.Entity("ProjectNehaPalace.Models.HotelViewModels.Customer", b =>
                {
                    b.HasOne("ProjectNehaPalace.Models.HotelViewModels.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID");
                });

            modelBuilder.Entity("ProjectNehaPalace.Models.HotelViewModels.CustomerHistory", b =>
                {
                    b.HasOne("ProjectNehaPalace.Models.HotelViewModels.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID");
                });

            modelBuilder.Entity("ProjectNehaPalace.Models.HotelViewModels.CustomerReview", b =>
                {
                    b.HasOne("ProjectNehaPalace.Models.HotelViewModels.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID");
                });

            modelBuilder.Entity("ProjectNehaPalace.Models.HotelViewModels.Employee", b =>
                {
                    b.HasOne("ProjectNehaPalace.Models.HotelViewModels.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");

                    b.HasOne("ProjectNehaPalace.Models.HotelViewModels.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID");
                });

            modelBuilder.Entity("ProjectNehaPalace.Models.HotelViewModels.EmployeeCompensation", b =>
                {
                    b.HasOne("ProjectNehaPalace.Models.HotelViewModels.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID");
                });

            modelBuilder.Entity("ProjectNehaPalace.Models.HotelViewModels.Person", b =>
                {
                    b.HasOne("ProjectNehaPalace.Models.HotelViewModels.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID");
                });

            modelBuilder.Entity("ProjectNehaPalace.Models.HotelViewModels.Room", b =>
                {
                    b.HasOne("ProjectNehaPalace.Models.HotelViewModels.Booking")
                        .WithMany("Room")
                        .HasForeignKey("BookingID");
                });
#pragma warning restore 612, 618
        }
    }
}
